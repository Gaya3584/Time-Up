const express = require("express");
const router = express.Router();
const Schedule = require("../models/Schedule");
const axios = require("axios");
const verifyToken = require("../middleware/verifyToken");

// ✅ Get schedules for the logged-in user
router.get("/", verifyToken, async (req, res) => {
  const userId = req.user.id;
  const data = await Schedule.find({ userId });
  res.json(data);
});

// ✅ Create a schedule
router.post("/", verifyToken, async (req, res) => {
  try {
    const newSchedule = new Schedule({
      ...req.body,
      userId: req.user.id,
    });
    const saved = await newSchedule.save();
    res.status(201).json(saved);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// ✅ Delete a schedule
router.delete("/:id", verifyToken, async (req, res) => {
  await Schedule.findByIdAndDelete(req.params.id);
  res.sendStatus(204);
});

// ✅ Update a schedule
router.put("/:id", verifyToken, async (req, res) => {
  const updated = await Schedule.findByIdAndUpdate(req.params.id, req.body, { new: true });
  res.json(updated);
});

// ✅ Auto-schedule (AI)
// ✅ Auto-schedule (AI) — one per day logic
router.post("/auto", verifyToken, async (req, res) => {
  try {
    const { cropType, location, duration, phoneNumber } = req.body;
    const daysNeeded = duration === "week" ? 7 : 30;

    // 1. Get coordinates
    const geo = await axios.get(
      `https://api.opencagedata.com/geocode/v1/json?q=${location}&key=${process.env.GEOCODING_API_KEY}`
    );
    const { lat, lng } = geo.data.results[0].geometry;

    // 2. Get weather data
    const weather = await axios.get(
      `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lng}&appid=${process.env.OPENWEATHER_API_KEY}&units=metric`
    );

    const forecastList = weather.data.list;
    const now = new Date();
    const usedDays = new Set();
    const selectedEntries = [];

    for (const entry of forecastList) {
      const dt = new Date(entry.dt_txt);
      const dateStr = dt.toISOString().split("T")[0]; // e.g., '2025-07-26'

      if (dt < now) continue;
      if (usedDays.has(dateStr)) continue; // only 1 per day

      const temp = entry.main.temp;
      const humidity = entry.main.humidity;
      const rain = entry.rain?.["3h"] || 0;

      const isGood =
        temp >= 20 &&
        temp <= 36 &&
        humidity <= 90 &&
        rain < 2;

      if (isGood) {
        usedDays.add(dateStr);
        selectedEntries.push(entry);
      }

      if (selectedEntries.length >= daysNeeded) break;
    }

    // Fallback: if not enough suitable dates
    if (selectedEntries.length < daysNeeded) {
      for (const entry of forecastList) {
        const dt = new Date(entry.dt_txt);
        const dateStr = dt.toISOString().split("T")[0];
        if (dt < now || usedDays.has(dateStr)) continue;

        usedDays.add(dateStr);
        selectedEntries.push(entry);
        if (selectedEntries.length >= daysNeeded) break;
      }
    }

    // 3. Create new schedules
    const newSchedules = selectedEntries.map((entry) => ({
      cropType,
      location,
      phoneNumber,
      scheduledDate: new Date(entry.dt_txt),
      autoGenerated: true,
      userId: req.user.id,
    }));

    await Schedule.insertMany(newSchedules);
    res.json({ success: true, schedules: newSchedules });

  } catch (err) {
    console.error("Auto-scheduling error:", err.message);
    res.status(500).json({ success: false, error: "Auto-scheduling failed" });
  }
});


module.exports = router;
